#!/bin/bash

# Script para limpar recursos √≥rf√£os do AWS antes de executar terraform apply
# Execute este script antes de rodar o pipeline para resolver conflitos de estado

set -e

echo "üßπ Iniciando limpeza de recursos AWS √≥rf√£os..."

# Configurar vari√°veis
PROJECT_NAME="orderflow"
ENVIRONMENT="dev"
REGION="us-east-1"

echo "üìã Projeto: $PROJECT_NAME | Ambiente: $ENVIRONMENT | Regi√£o: $REGION"

# 1. Deletar inst√¢ncia RDS se existir (for√ßar)
echo "üóÑÔ∏è Verificando inst√¢ncia RDS..."
RDS_INSTANCE="${PROJECT_NAME}-db-${ENVIRONMENT}"
if aws rds describe-db-instances --db-instance-identifier "$RDS_INSTANCE" --region "$REGION" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è Inst√¢ncia RDS encontrada. Deletando com skip-final-snapshot..."
    aws rds delete-db-instance \
        --db-instance-identifier "$RDS_INSTANCE" \
        --skip-final-snapshot \
        --region "$REGION" || true
    
    echo "‚è≥ Aguardando dele√ß√£o da inst√¢ncia RDS..."
    aws rds wait db-instance-deleted \
        --db-instance-identifier "$RDS_INSTANCE" \
        --region "$REGION" || true
else
    echo "‚úÖ Nenhuma inst√¢ncia RDS encontrada"
fi

# 2. Deletar Parameter Group se existir
echo "üîß Verificando Parameter Group..."
PARAM_GROUP="${PROJECT_NAME}-pg-${ENVIRONMENT}"
if aws rds describe-db-parameter-groups --db-parameter-group-name "$PARAM_GROUP" --region "$REGION" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è Parameter Group encontrado. Deletando..."
    aws rds delete-db-parameter-group \
        --db-parameter-group-name "$PARAM_GROUP" \
        --region "$REGION" || true
else
    echo "‚úÖ Nenhum Parameter Group encontrado"
fi

# 3. Deletar Subnet Group se existir
echo "üåê Verificando DB Subnet Group..."
SUBNET_GROUP="${PROJECT_NAME}-db-subnet-group-${ENVIRONMENT}"
if aws rds describe-db-subnet-groups --db-subnet-group-name "$SUBNET_GROUP" --region "$REGION" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è DB Subnet Group encontrado. Deletando..."
    aws rds delete-db-subnet-group \
        --db-subnet-group-name "$SUBNET_GROUP" \
        --region "$REGION" || true
else
    echo "‚úÖ Nenhum DB Subnet Group encontrado"
fi

# 4. Limpar bucket S3 (esvaziar antes de deletar)
echo "ü™£ Verificando buckets S3..."
BUCKET_PREFIX="${PROJECT_NAME}-vpc-flow-logs-${ENVIRONMENT}"
for bucket in $(aws s3api list-buckets --query "Buckets[?starts_with(Name, '$BUCKET_PREFIX')].Name" --output text --region "$REGION"); do
    if [ ! -z "$bucket" ]; then
        echo "‚ö†Ô∏è Bucket S3 encontrado: $bucket. Esvaziando..."
        
        # Deletar todas as vers√µes dos objetos
        aws s3api delete-objects \
            --bucket "$bucket" \
            --delete "$(aws s3api list-object-versions \
                --bucket "$bucket" \
                --output json \
                --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" \
            --region "$REGION" || true
        
        # Deletar marcadores de dele√ß√£o
        aws s3api delete-objects \
            --bucket "$bucket" \
            --delete "$(aws s3api list-object-versions \
                --bucket "$bucket" \
                --output json \
                --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" \
            --region "$REGION" || true
        
        echo "‚úÖ Bucket $bucket esvaziado"
    fi
done

# 5. Cancelar dele√ß√£o pendente do Secrets Manager
echo "üîê Verificando Secrets Manager..."
SECRET_NAME="${PROJECT_NAME}-db-credentials-production"
if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" --region "$REGION" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è Secret encontrado. Verificando se est√° agendado para dele√ß√£o..."
    
    # Tentar restaurar se estiver agendado para dele√ß√£o
    aws secretsmanager restore-secret \
        --secret-id "$SECRET_NAME" \
        --region "$REGION" || true
    
    # For√ßar dele√ß√£o imediata
    aws secretsmanager delete-secret \
        --secret-id "$SECRET_NAME" \
        --force-delete-without-recovery \
        --region "$REGION" || true
        
    echo "‚úÖ Secret processado"
else
    echo "‚úÖ Nenhum secret encontrado"
fi

# 6. Aguardar propaga√ß√£o
echo "‚è≥ Aguardando propaga√ß√£o das mudan√ßas (30 segundos)..."
sleep 30

echo "‚úÖ Limpeza conclu√≠da! Agora voc√™ pode executar terraform apply com seguran√ßa."
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "1. cd terraform/"
echo "2. terraform plan"
echo "3. terraform apply"
